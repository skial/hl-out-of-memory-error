@:keep @:directlyUsed @:used @:coreApi
class haxe.Exception {

	public function new[Function:(message : String, ?previous : Null<haxe.Exception>, ?native : Null<Any>) -> Void]
		[Arg:String] [Local message(1530):String]
		[Arg:Null<haxe.Exception>]
			[Local previous(1531):Null<haxe.Exception>]
			[Const:Null<haxe.Exception>] null
		[Arg:Null<Any>]
			[Local native(1532):Null<Any>]
			[Const:Null<Any>] null
		[Block:Void]
			[Binop:Int]
				[Field:Int]
					[Const:haxe.Exception] this
					[FInstance:Int]
						haxe.Exception
						__skipStack:Int
				=
				[Const:Int] 0
			[Binop:String]
				[Field:String]
					[Const:haxe.Exception] this
					[FInstance:String]
						haxe.Exception
						__exceptionMessage:String
				=
				[Local message(1530):String:String]
			[Binop:Null<haxe.Exception>]
				[Field:Null<haxe.Exception>]
					[Const:haxe.Exception] this
					[FInstance:Null<haxe.Exception>]
						haxe.Exception
						__previousException:Null<haxe.Exception>
				=
				[Local previous(1531):Null<haxe.Exception>:Null<haxe.Exception>]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local native(1532):Null<Any>:Null<Any>]
						!=
						[Const:Null<Any>] null
				[Then:Any] [Block:Any]
					[Binop:hl.NativeArray<hl.Bytes>]
						[Field:hl.NativeArray<hl.Bytes>]
							[Const:haxe.Exception] this
							[FInstance:hl.NativeArray<hl.Bytes>]
								haxe.Exception
								__nativeStack:hl.NativeArray<hl.Bytes>
						=
						[Call:hl.NativeArray<hl.Bytes>]
							[Field:() -> hl.NativeArray<hl.Bytes>]
								[TypeExpr haxe.NativeStackTrace:Class<haxe.NativeStackTrace>]
								[FStatic:() -> hl.NativeArray<hl.Bytes>]
									haxe.NativeStackTrace
									exceptionStack:() -> hl.NativeArray<hl.Bytes>
					[Binop:Any]
						[Field:Any]
							[Const:haxe.Exception] this
							[FInstance:Any]
								haxe.Exception
								__nativeException:Any
						=
						[Local native(1532):Null<Any>:Null<Any>]
				[Else:Any] [Block:Any]
					[Binop:hl.NativeArray<hl.Bytes>]
						[Field:hl.NativeArray<hl.Bytes>]
							[Const:haxe.Exception] this
							[FInstance:hl.NativeArray<hl.Bytes>]
								haxe.Exception
								__nativeStack:hl.NativeArray<hl.Bytes>
						=
						[Call:hl.NativeArray<hl.Bytes>]
							[Field:() -> hl.NativeArray<hl.Bytes>]
								[TypeExpr haxe.NativeStackTrace:Class<haxe.NativeStackTrace>]
								[FStatic:() -> hl.NativeArray<hl.Bytes>]
									haxe.NativeStackTrace
									callStack:() -> hl.NativeArray<hl.Bytes>
					[Binop:Any]
						[Field:Any]
							[Const:haxe.Exception] this
							[FInstance:Any]
								haxe.Exception
								__nativeException:Any
						=
						[Meta:Any]
							:implicitCast
							[Cast:Any] [Const:haxe.Exception] this

	public var message(get,never):String;

	public var native(get,never):Any;

	@:noCompletion
	var __exceptionMessage:String;

	@:noCompletion
	var __nativeStack:hl.NativeArray<hl.Bytes>;

	@:value(0) @:noCompletion @:ifFeature("haxe.Exception.get_stack")
	var __skipStack:Int;

	@:noCompletion
	var __nativeException:Any;

	@:noCompletion
	var __previousException:Null<haxe.Exception>;

	function unwrap[Function:() -> Any]
		[Block:Dynamic]
			[Return:Dynamic]
				[Field:Any]
					[Const:haxe.Exception] this
					[FInstance:Any]
						haxe.Exception
						__nativeException:Any

	public function toString[Function:() -> String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:() -> String]
						[Const:haxe.Exception] this
						[FInstance:() -> String]
							haxe.Exception
							get_message:() -> String

	function get_message[Function:() -> String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Field:String]
					[Const:haxe.Exception] this
					[FInstance:String]
						haxe.Exception
						__exceptionMessage:String

	function get_native[Function:() -> Any]
		[Block:Dynamic]
			[Return:Dynamic]
				[Field:Any]
					[Const:haxe.Exception] this
					[FInstance:Any]
						haxe.Exception
						__nativeException:Any

	static function caught[Function:(value : Any) -> haxe.Exception]
		[Arg:Any] [Local value(1854):Any]
		[Block:Void]
			[If:Void]
				[Parenthesis:Bool]
					[Call:Bool]
						[Field:(v : Dynamic, t : Dynamic) -> Bool]
							[TypeExpr Std:Class<Std>]
							[FStatic:(v : Dynamic, t : Dynamic) -> Bool]
								Std
								isOfType:(v : Dynamic, t : Dynamic) -> Bool
						[Cast:Dynamic] [Local value(1854):Any:Any]
						[Cast:Dynamic] [TypeExpr haxe.Exception:Class<haxe.Exception>]
				[Then:Dynamic] [Return:Dynamic]
					[Meta:haxe.Exception]
						:implicitCast
						[Cast:haxe.Exception] [Cast:Dynamic] [Local value(1854):Any:Any]
				[Else:Dynamic] [Return:Dynamic]
					[New:haxe.ValueException]
						haxe.ValueException
						[Local value(1854):Any:Any]
						[Const:Null<haxe.Exception>] null
						[Local value(1854):Any:Any]

	static function thrown[Function:(value : Any) -> Any]
		[Arg:Any] [Local value(1867):Any]
		[Block:Void]
			[If:Void]
				[Parenthesis:Bool]
					[Call:Bool]
						[Field:(v : Dynamic, t : Dynamic) -> Bool]
							[TypeExpr Std:Class<Std>]
							[FStatic:(v : Dynamic, t : Dynamic) -> Bool]
								Std
								isOfType:(v : Dynamic, t : Dynamic) -> Bool
						[Local value(1867):Any:Any]
						[TypeExpr haxe.Exception:Class<haxe.Exception>]
				[Then:Dynamic] [Return:Dynamic]
					[Call:Any]
						[Field:() -> Any]
							[Meta:haxe.Exception]
								:implicitCast
								[Cast:haxe.Exception] [Cast:Dynamic] [Local value(1867):Any:Any]
							[FInstance:() -> Any]
								haxe.Exception
								get_native:() -> Any
				[Else:Dynamic] [Block:Dynamic]
					[Var e(1871):haxe.ValueException]
						[New:haxe.ValueException]
							haxe.ValueException
							[Local value(1867):Any:Any]
							[Const:Null<haxe.Exception>] null
							[Const:Null<Any>] null
					[Unop:Int]
						++
						Postfix
						[Field:Int]
							[Local e(1871):haxe.ValueException:haxe.ValueException]
							[FInstance:Int]
								haxe.Exception
								__skipStack:Int
					[Return:Dynamic]
						[Meta:Any]
							:implicitCast
							[Cast:Any] [Local e(1871):haxe.ValueException:haxe.ValueException]
}