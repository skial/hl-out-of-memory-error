@:directlyUsed @:used
extern class hl.Api {

	@:has_untyped
	static inline function rethrow(v:Dynamic):Void;

	@:hlNative("std", "obj_get_field")
	static function getField(obj:Dynamic, hash:Int):Dynamic;

	@:hlNative("std", "obj_set_field")
	static function setField(obj:Dynamic, hash:Int, value:Dynamic):Void;

	@:hlNative("std", "obj_has_field")
	static function hasField(obj:Dynamic, hash:Int):Bool;

	@:hlNative("std", "obj_delete_field")
	static function deleteField(obj:Dynamic, hash:Int):Bool;

	@:hlNative("std", "call_method")
	static function callMethod(f:haxe.Function, args:hl.NativeArray<Dynamic>):Dynamic;

	@:hlNative("std", "get_closure_value")
	static function getClosureValue(f:haxe.Function):Dynamic;

	@:hlNative("std", "make_closure")
	static function makeClosure(f:haxe.Function, v:Dynamic):Dynamic;

	@:hlNative("std", "no_closure")
	static function noClosure(f:haxe.Function):haxe.Function;

	@:hlNative("std", "value_cast")
	static function safeCast(v:Dynamic, t:hl.Type):Dynamic;

	@:hlNative("std", "make_var_args")
	static function makeVarArgs(v:hl.NativeArray<Dynamic> -> Dynamic):haxe.Function;

	@:hlNative("std", "get_virtual_value")
	static function getVirtualValue(v:Dynamic):Dynamic;

	@:hlNative("std", "set_error_handler")
	static function setErrorHandler(v:Dynamic -> Void):Void;

	@:hlNative("std", "breakpoint")
	static function breakPoint():Void;

	@:hlNative("std", "sys_is64")
	static function is64():Bool;

	@:hlNative("std", "ptr_compare")
	static function comparePointer(a:Dynamic, b:Dynamic):Int;
}